name: Add Static User Profile with Self-Task

on:
  workflow_dispatch:
    inputs:
      username:
        description: 'Enter the username for data collection'
        required: true
        type: string

jobs:
  collect-user-data:
    runs-on: ubuntu-latest
    timeout-minutes: 10 # To ensure the job does not run indefinitely

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Validate Username Input
      run: |
        # Validate if username is non-empty and alphanumeric
        if [[ -z "${{ github.event.inputs.username }}" || ! "${{ github.event.inputs.username }}" =~ ^[a-zA-Z0-9_-]+$ ]]; then
          echo "Invalid username. Only alphanumeric characters, hyphens, and underscores are allowed."
          exit 1
        fi

    - name: Set up Git Config
      run: |
        # Set Git config using the provided username and a default email
        git config --local user.name "${{ github.event.inputs.username }}"
        git config --local user.email "${{ github.event.inputs.username }}@example.com"

    - name: Fetch User Info from GitHub API
      id: fetch_user_info
      run: |
        # Use GitHub API to fetch public user data
        USERNAME="${{ github.event.inputs.username }}"
        
        # Fetch user data in a safe way, handle possible errors
        USER_DATA=$(curl -s "https://api.github.com/users/${USERNAME}")
        if [ $(echo "$USER_DATA" | jq -r '.message') == "Not Found" ]; then
          echo "User not found on GitHub. Please check the username."
          exit 1
        fi

        # Extract relevant information from the response
        BIO=$(echo "$USER_DATA" | jq -r '.bio')
        EMAIL=$(echo "$USER_DATA" | jq -r '.email')
        PUBLIC_REPOS=$(echo "$USER_DATA" | jq -r '.public_repos')

        # Set the extracted data as environment variables
        echo "bio=$BIO" >> $GITHUB_ENV
        echo "email=$EMAIL" >> $GITHUB_ENV
        echo "public_repos=$PUBLIC_REPOS" >> $GITHUB_ENV

    - name: Create User Folder Structure
      run: |
        # Create folder structure to store user profile information
        mkdir -p "Contributors/${{ github.event.inputs.username }}/Profile"

        # Create README.md with user information
        echo "# Profile for ${{ github.event.inputs.username }}" > "Contributors/${{ github.event.inputs.username }}/Profile/README.md"
        echo "## Bio: ${{ env.bio }}" >> "Contributors/${{ github.event.inputs.username }}/Profile/README.md"
        echo "## Email: ${{ env.email }}" >> "Contributors/${{ github.event.inputs.username }}/Profile/README.md"
        echo "## Public Repositories: ${{ env.public_repos }}" >> "Contributors/${{ github.event.inputs.username }}/Profile/README.md"

        # Create index.html with user details (for easier access on web)
        echo "<html>" > "Contributors/${{ github.event.inputs.username }}/Profile/index.html"
        echo "<head><title>${{ github.event.inputs.username }} Profile</title></head>" >> "Contributors/${{ github.event.inputs.username }}/Profile/index.html"
        echo "<body><h1>${{ github.event.inputs.username }}'s Profile</h1>" >> "Contributors/${{ github.event.inputs.username }}/Profile/index.html"
        echo "<p><strong>Bio:</strong> ${{ env.bio }}</p>" >> "Contributors/${{ github.event.inputs.username }}/Profile/index.html"
        echo "<p><strong>Email:</strong> ${{ env.email }}</p>" >> "Contributors/${{ github.event.inputs.username }}/Profile/index.html"
        echo "<p><strong>Public Repositories:</strong> ${{ env.public_repos }}</p>" >> "Contributors/${{ github.event.inputs.username }}/Profile/index.html"
        echo "</body></html>" >> "Contributors/${{ github.event.inputs.username }}/Profile/index.html"

    - name: Commit Changes
      run: |
        # Add and commit the changes made
        git add .
        git commit -m "Add user profile for ${{ github.event.inputs.username }} with bio, email, and public repos"
        git push
