name: Add Static User Profile with Self-Task

on:
  workflow_dispatch:
    inputs:
      username_or_url:
        description: 'Enter the GitHub username or GitHub profile URL'
        required: true
        type: string

jobs:
  collect-user-data:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # To ensure the job does not run indefinitely

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Validate Input and Extract Username
      run: |
        # Get the input username or URL
        INPUT="${{ github.event.inputs.username_or_url }}"

        # Check if input is a URL or a username
        if [[ "$INPUT" =~ ^https:\/\/github\.com\/([a-zA-Z0-9_-]+) ]]; then
          # Extract username from URL
          USERNAME="${BASH_REMATCH[1]}"
        elif [[ "$INPUT" =~ ^[a-zA-Z0-9_-]+$ ]]; then
          # If the input is just a username
          USERNAME="$INPUT"
        else
          echo "Invalid input. Please provide a valid GitHub username or a GitHub profile URL."
          exit 1
        fi

        # Store username as an environment variable for further steps
        echo "USERNAME=$USERNAME" >> $GITHUB_ENV

    - name: Fetch User Info from GitHub API
      id: fetch_user_info
      run: |
        # Use GitHub API to fetch user data
        USERNAME="${{ env.USERNAME }}"
        
        # Fetch user data from GitHub API
        USER_DATA=$(curl -s "https://api.github.com/users/${USERNAME}")
        
        # Check if the user exists
        if [ $(echo "$USER_DATA" | jq -r '.message') == "Not Found" ]; then
          echo "User not found on GitHub. Please check the username or URL."
          exit 1
        fi

        # Extract user details (name, bio, email, public_repos)
        NAME=$(echo "$USER_DATA" | jq -r '.name')
        BIO=$(echo "$USER_DATA" | jq -r '.bio')
        EMAIL=$(echo "$USER_DATA" | jq -r '.email')
        PUBLIC_REPOS=$(echo "$USER_DATA" | jq -r '.public_repos')

        # Set the extracted data as environment variables for use in other steps
        echo "name=$NAME" >> $GITHUB_ENV
        echo "bio=$BIO" >> $GITHUB_ENV
        echo "email=$EMAIL" >> $GITHUB_ENV
        echo "public_repos=$PUBLIC_REPOS" >> $GITHUB_ENV

    - name: Create User Folder Structure
      run: |
        # Create folder structure for the user
        mkdir -p "Contributors/${{ env.USERNAME }}/Profile"

        # Create README.md with user profile information
        echo "# Profile for ${{ env.USERNAME }}" > "Contributors/${{ env.USERNAME }}/Profile/README.md"
        echo "## Name: ${{ env.name }}" >> "Contributors/${{ env.USERNAME }}/Profile/README.md"
        echo "## Bio: ${{ env.bio }}" >> "Contributors/${{ env.USERNAME }}/Profile/README.md"
        echo "## Email: ${{ env.email }}" >> "Contributors/${{ env.USERNAME }}/Profile/README.md"
        echo "## Public Repositories: ${{ env.public_repos }}" >> "Contributors/${{ env.USERNAME }}/Profile/README.md"

        # Create index.html with user profile information
        echo "<html>" > "Contributors/${{ env.USERNAME }}/Profile/index.html"
        echo "<head><title>${{ env.USERNAME }} Profile</title></head>" >> "Contributors/${{ env.USERNAME }}/Profile/index.html"
        echo "<body><h1>${{ env.USERNAME }}'s Profile</h1>" >> "Contributors/${{ env.USERNAME }}/Profile/index.html"
        echo "<p><strong>Name:</strong> ${{ env.name }}</p>" >> "Contributors/${{ env.USERNAME }}/Profile/index.html"
        echo "<p><strong>Bio:</strong> ${{ env.bio }}</p>" >> "Contributors/${{ env.USERNAME }}/Profile/index.html"
        echo "<p><strong>Email:</strong> ${{ env.email }}</p>" >> "Contributors/${{ env.USERNAME }}/Profile/index.html"
        echo "<p><strong>Public Repositories:</strong> ${{ env.public_repos }}</p>" >> "Contributors/${{ env.USERNAME }}/Profile/index.html"
        echo "</body></html>" >> "Contributors/${{ env.USERNAME }}/Profile/index.html"

    - name: Commit and Push Changes
      run: |
        # Add, commit, and push the changes to the repository
        git add .
        git commit -m "Add profile for ${{ env.USERNAME }} with name, bio, email, and public repos"
        git push
